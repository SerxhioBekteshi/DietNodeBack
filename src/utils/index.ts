import { eFilterOperator, eTimeOffStatus } from "../enums";

export const getRandomHexadecimal = (size) => {
  return [...Array(size)]
    .map(() => Math.floor(Math.random() * 16).toString(16))
    .join("");
};

export const buildOperation = (operation: eFilterOperator, value: any) => {
  //TODO: anticipate date values
  switch (operation) {
    case eFilterOperator.Contain:
      return { $regex: new RegExp(value, "gi") };
    case eFilterOperator.StartWith:
      return { $regex: new RegExp("\\b" + value, "gi") };
    case eFilterOperator.EndWith:
      return { $regex: new RegExp(value + "\\b", "gi") };
    case eFilterOperator.Equal:
      return { $eq: value };
    case eFilterOperator.Different:
      return { $ne: value };
    case eFilterOperator.GreaterOrEqual:
      return { $gte: value };
    case eFilterOperator.GreaterThan:
      return { $gt: value };
    case eFilterOperator.LessOrEqual:
      return { $lt: value };
    case eFilterOperator.LessThan:
      return { $lte: value };
  }
};
export function getStatusColor(status: eTimeOffStatus, noVar?: boolean) {
  if (noVar) {
    switch (status) {
      case eTimeOffStatus.Approved:
        return "--bs-primary";
      case eTimeOffStatus.Booked:
        return "--bs-secondary";
      case eTimeOffStatus.Rejected:
        return "--bs-red";
      default:
        return "--bs-secondary";
    }
  }
  switch (status) {
    case eTimeOffStatus.Approved:
      return "var(--bs-primary)";
    case eTimeOffStatus.Booked:
      return "var(--bs-secondary)";
    case eTimeOffStatus.Rejected:
      return "var(--bs-red)";
    default:
      return "var(--bs-secondary)";
  }
}

export function isObjEmpty(obj) {
  return Object.values(obj).length === 0 && obj.constructor === Object;
}
export function capitalize(text: string) {
  return text[0].toUpperCase() + text.slice(1).toLowerCase();
}

export function getAutoGeneratedPassword() {
  return `HR@${getRandomHexadecimal(8)}`;
}

export function compareIds(id1, id2) {
  return id1.toString() === id2.toString();
}
