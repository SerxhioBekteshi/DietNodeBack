import { eFilterOperator } from "../enums";
import Menu from "../models/menuModel";
import Role from "../models/roleModel";
import User from "../models/userModel";

export const getRandomHexadecimal = (size) => {
  return [...Array(size)]
    .map(() => Math.floor(Math.random() * 16).toString(16))
    .join("");
};

export const buildOperation = (operation: eFilterOperator, value: any) => {
  //TODO: anticipate date values
  switch (operation) {
    case eFilterOperator.Contain:
      return { $regex: new RegExp(value, "gi") };
    case eFilterOperator.StartWith:
      return { $regex: new RegExp("\\b" + value, "gi") };
    case eFilterOperator.EndWith:
      return { $regex: new RegExp(value + "\\b", "gi") };
    case eFilterOperator.Equal:
      return { $eq: value };
    case eFilterOperator.Different:
      return { $ne: value };
    case eFilterOperator.GreaterOrEqual:
      return { $gte: value };
    case eFilterOperator.GreaterThan:
      return { $gt: value };
    case eFilterOperator.LessOrEqual:
      return { $lt: value };
    case eFilterOperator.LessThan:
      return { $lte: value };
  }
};

export function isObjEmpty(obj) {
  return Object.values(obj).length === 0 && obj.constructor === Object;
}
export function capitalize(text: string) {
  return text[0].toUpperCase() + text.slice(1).toLowerCase();
}

export function getAutoGeneratedPassword() {
  return `HR@${getRandomHexadecimal(8)}`;
}

export function compareIds(id1, id2) {
  return id1.toString() === id2.toString();
}

export const initializeRoles = async () => {
  const roles = [
    { id: 1, roleName: "admin" },
    { id: 2, roleName: "provider" },
    { id: 3, roleName: "user" },
  ];

  // Check if roles already exist
  const existingRoles = await Role.find();
  if (existingRoles.length === 0) {
    await Role.insertMany(roles);
    console.log("Default roles initialized successfully");
  } else {
    console.log("Roles already exist. Skipping initialization.");
  }
};

export const initializeAdmin = async function () {
  const userAdmin = {
    id: 1,
    email: "serxhio131@gmail.com",
    name: "serxhio",
    lastName: "bekteshi",
    password: "Serxhio123@",
    passwordConfirm: "Serxhio123@",
    quizFulfilled: false,
    accountSubmitted: true,
    nipt: "",
    termsAgreed: false,
    roleId: 1,
  };

  const existingAdmin = await User.find();
  if (existingAdmin.length === 0) {
    await User.create(userAdmin);
    console.log("Default roles initialized successfully");
  } else {
    console.log("Admin already exist. Skipping initialization.");
  }
};

export const initializeMenuItems = async function () {
  const menuItems = [
    // { id: 1, label: "Admin Main Page", icon: "pi pi-user", to: "/", roleId: 1 },
    // {
    //   id: 2,
    //   label: "Provider accounts",
    //   icon: "pi pi-question",
    //   to: "/providers/registration",
    //   roleId: 1,
    // },
    // {
    //   id: 3,
    //   label: "Quiz configuration",
    //   icon: "pi pi-question",
    //   to: "/quiz",
    //   roleId: 1,
    // },
    // {
    //   id: 4,
    //   label: "Orders",
    //   icon: "pi pi-calculator",
    //   to: "/orders",
    //   roleId: 1,
    // },
    // {
    //   id: 5,
    //   label: "Provider Main Page",
    //   icon: "pi pi-user",
    //   to: "/",
    //   roleId: 2,
    // },
    // {
    //   id: 6,
    //   label: "Meals",
    //   icon: "pi pi-box",
    //   to: "/meals",
    //   roleId: 2,
    // },
    // {
    //   id: 7,
    //   label: "Orders",
    //   icon: "pi pi-calculator",
    //   to: "/orders",
    //   roleId: 2,
    // },
    // {
    //   id: 8,
    //   label: "Meals",
    //   icon: "pi pi-box",
    //   to: "/meals",
    //   roleId: 3,
    // },
    // {
    //   id: 9,
    //   label: "Orders",
    //   icon: "pi pi-calculator",
    //   to: "/orders",
    //   roleId: 3,
    // },
  ];

  return Menu.insertMany(menuItems);
};
